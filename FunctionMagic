import java.util.Date

object FunctionMagic{

def main(args: Array[String]) {
     println(doprint())
     partialApplication()
     inc(5)
     country()
     delayed(time());
     println(addInt(1,3))
     printStrings("prem","meera","sony")
     println(factorial(5))
     println(factorialFor(3))
}

// Scala - Partially Applied Functions
def partialApplication(){
val date = new Date
val logWithDateBound = log(date, _ : String)

logWithDateBound("message1" )
Thread.sleep(1000)

logWithDateBound("message2" )
Thread.sleep(1000)

logWithDateBound("message3" )
}

def log(date: Date, message: String) = {
   println(date + "----" + message)
}

//Scala - Anonymous Functions
var inc = (x:Int) => x+1
var doprint = () => { System.getProperty("user.dir") }

// Nested function
def country() = {
  state()
  println("India")
  def state(){
    println("MP")
    city()
    def city(){
      println("Indore")
    }
  }

}

// Factorial using recursion
def factorial(n:Int):Int = {
  if (n <= 1 ){
    return 1
    }else{
    n * factorial(n-1)
    }
}

// Scala - Default Parameter Values for a Function
def addInt( a:Int = 5, b:Int = 7 ) : Int = {
   var sum:Int = 0
   sum = a + b

   return sum
}

// Factorial using for loop
  def factorialFor(n:Int):Int = {
    var i = 1
    var facto = 1
    for (i <- 1 to n){
       facto = facto * i
    }
  return facto
}

def printStrings(args :String*) = {
  for ( arg <- args){
    println(arg)
  }
}


def printMe( ) : Unit = {
   println("Hello, Scala!")
}

def time() = {
   println("Getting time in nano seconds")
   System.nanoTime
}
  def delayed( t: => Long ) = {
    println("In delayed method")
    println("Param: " + t)
   }
}
